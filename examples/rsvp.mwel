#
# Variables
#

spike_rate = var (30)
eye_h_raw = var ()
eye_v_raw = var ()
spikes = var ()
reward = var ()
eye_h_calibrated = var ()
eye_v_calibrated = var ()
eye_h = var ()
eye_v = var ()
saccade = var ()
eye_in_window = var ()

fixation_width = var (2)
fixation_point_size = var (0.4)
fixation_pos_x = var (0)
fixation_pos_y = var (0)
stm_size = var (5.4)
stm_pos_x = var (0)
stm_pos_y = var (5)

images_shown = var (0)
imageGroup_repetition = var (0)
number_repeats = var (2)
ITI = var (500)
sync = var (0)
number_of_stm_shown = var (0)
ignore_time = var (2s)
stimon_delay = var (160ms)
stimon_time = var (100ms)
stimoff_time = var (100ms)
show_N_images = var (6)
imagesetsize = var (100)
reward_duration = var (100ms)
success = var (false)
miss_count = var (0)
failure = var (false)
ignore = var (false)

RSVP_test_stim_index = selection (
    values = [0:99],
    selection = 'random_without_replacement',
    nsamples = 1,
    sampling_method = 'cycles',
    )


#
# Data pipeline
#

fm = iodevice.fake_monkey (
    spike_rate = spike_rate,

    em = iochannel.eye_movement (
        eye_h = eye_h_raw,
        eye_v = eye_v_raw,
        data_interval = 1ms,
        update_interval = 10ms,
        ),
    sp = iochannel.spike ( variable = spikes ),
    rw = iochannel.juice ( variable = reward ),
    )

eye_calibrator = standard_eye_calibrator (
    eyeh_raw = eye_h_raw,
    eyev_raw = eye_v_raw,
    eyeh_calibrated = eye_h_calibrated,
    eyev_calibrated = eye_v_calibrated,
    )

eye_h_filter = boxcar_filter_1D (
    in1 = eye_h_calibrated,
    out1 = eye_h,
    width_samples = 5,
    )

eye_v_filter = boxcar_filter_1D (
    in1 = eye_v_calibrated,
    out1 = eye_v,
    width_samples = 5,
    )

eye_monitor = basic_eye_monitor (
    eyeh_calibrated = eye_h,
    eyev_calibrated = eye_v,
    eye_state = saccade,
    width_samples = 5,
    saccade_entry_speed = 60,
    saccade_exit_speed = 20,
    )


#
# Stimuli
#

display = iodevice.stimulus_display ( background_color = [0.5, 0.5, 0.5] )

fixation_dot = stimulus.fixation_point (
    color = [1,0,0],
    trigger_width = fixation_width,
    trigger_watch_x = eye_h,
    trigger_watch_y = eye_v,
    trigger_flag = eye_in_window,
    x_size = fixation_point_size,
    y_size = fixation_point_size,
    x_position = fixation_pos_x,
    y_position = fixation_pos_y,
    rotation = 0.0,
    alpha_multiplier = 1.0,
    )

RSVP_images = genlist(
    RSVP_stim_counter, [1:100],
    image_file (
        path = format('images/RSVP_images/OSImage_%d.png', RSVP_stim_counter),
        x_size = stm_size,
        y_size = stm_size,
        x_position = stm_pos_x,
        y_position = stm_pos_y,
        rotation = 0,
        alpha_multiplier = 1,
        )
    )


#
# Sounds
#

stm_on_sound = wav_file ('sounds/stm_on.wav')
reward_sound = wav_file ('sounds/reward.wav')
failure_sound = wav_file ('sounds/failure.wav')
complete_sound = wav_file ('sounds/complete.wav')
acquire_sound = wav_file ('sounds/acquire.wav')


#
# Experiment
#

function rsvp_protocol():
    reset_selection (RSVP_test_stim_index)
    images_shown.assign (0)
    imageGroup_repetition.assign (0)
    fixation_point_size.assign (0.2)
    fixation_pos_x.assign (0)
    fixation_pos_y.assign (0)

    while (imageGroup_repetition < number_repeats):
        while (images_shown < imagesetsize):

            start_trial ()

            when (timer_expired('rsvp_ignore_timer')):
                ignored.assign (true)
            else when (eye_in_window and (not saccade)):
                play_sound (acquire_sound)
                when ((not eye_in_window) and (not saccade)):
                    failed.assign (true)
                else after (stimon_delay):
                    display_image_set ()
                end
            end

            finish_trial ()

        end
    end
end


function start_trial():
    wait (ITI)
    sync.assign (1)
    start_device_io (fm)
    report ('********** RSVP TRIAL START **********')
    
    number_of_stm_shown.assign (0)
    live_queue_stimulus (fixation_dot)
    update_stimulus_display ()
    play_sound (stm_on_sound)
    start_timer ( timer = 'rsvp_ignore_timer', duration = ignore_time )

    if (rand(0,1) > 0.1):  # Fake monkey ignores fixation 10% of time
        report ('Fixate on target')
        fake_monkey_saccade_and_fixate (
            duration = (rand(0.9, 1.5) *
                       (stimon_delay + ((stimon_time + stimoff_time) *
                                        show_N_images))),
            fake_monkey = fm,
            h = fixation_pos_x,
            v = fixation_pos_y,
            )
    end
end


function display_image_set():
    while ((not failed) and (number_of_stm_shown < show_N_images)):
        start_timer ( timer = 'stimon_timer', duration = stimon_time )
        report (format('********** stim on: RSVP_images[ %d ] **********',
                       RSVP_test_stim_index))
        queue_stimulus (RSVP_images[RSVP_test_stim_index])
        bring_stimulus_to_front (fixation_dot)
        update_stimulus_display ()

        # If image index is at 7, increase the spiking rate
        if (RSVP_test_stim_index == 7):
            spike_rate.assign (400)
        end

        when ((not eye_in_window) and (not saccade)):
            reject_stim ()
            failed.assign (true)
        else when (timer_expired('stimon_timer')):
            stim_off ()
        end
    end
end


function stim_off():
    start_timer ( timer = 'stimoff_timer', duration = stimoff_time )
    report ('************* stim off! **********')
    dequeue_stimulus (RSVP_images[RSVP_test_stim_index])
    update_stimulus_display ()
    spike_rate.assign (25)
    when ((not eye_in_window) and (not saccade)):
        reject_stim ()
        failed.assign (true)
    else when (timer_expired('stimoff_timer')):
        accept_stim ()
    end
end


function reject_stim():
    dequeue_stimulus (RSVP_images[RSVP_test_stim_index])
    update_stimulus_display ()
    spike_rate.assign (25)
    reject_selections (RSVP_test_stim_index)
end


function accept_stim():
    accept_selections (RSVP_test_stim_index)
    number_of_stm_shown.assign (number_of_stm_shown + 1)
    images_shown.assign (images_shown + 1)

    if (images_shown < imagesetsize):
        next_selection (RSVP_test_stim_index)
    else:
        reset_selection (RSVP_test_stim_index)
        imageGroup_repetition.assign (imageGroup_repetition + 1)
        images_shown.assign (0)
    end
end


function finish_trial():
    if (ignored):
        report ('************* RSVP Ignored!!!! **********')
        ignore.assign (ignore + 1)
        miss_count.assign (miss_count + 1)
    else if (failed):
        report ('************* RSVP Failure!!!! **********')
        play_sound (failure_sound)
        failure.assign (failure + 1)
        miss_count.assign (miss_count + 1)
    else:
        wait (500ms)
        report ('************* RSVP Success!!!! **********')
        reward.assign (reward_duration)
        success.assign (success + 1)
        miss_count.assign (0)
    end

    dequeue_stimulus (fixation_dot)
    update_stimulus_display ()
    if (miss_count < 5):
        wait (500ms)
    else:
        play_sound (failure_sound)
        miss_count.assign (0)
        wait (2.5s)
    end

    report ('************* RSVP Trial Completed **********')
    stop_device_io (fm)
    sync.assign (0)
    
    fake_monkey_saccade_and_fixate (
        fake_monkey = fm,
        duration = 0,
        h = 5,
        v = 0,
        )
end
