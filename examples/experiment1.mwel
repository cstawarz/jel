#
# I/O
#


display = iodevice.stimulus_display ( background_color = [0.5, 0.5, 0.5] )

mouse_input = iodevice.mouse_input ()
itc = mouse_input  # Production device will be an ITC-18

eye_monitor = filter.basic_eye_monitor (
    eyeh_calibrated = mouse_input.mouse_position_x,
    eyev_calibrated = mouse_input.mouse_position_y,
    width_samples = 1,
    saccade_entry_speed = 60,
    saccade_exit_speed = 20,
    )


#
# Stimuli
#


fixation_point = stimulus.fixation_point (
    color = 'red',
    trigger_width = 2,
    trigger_watch_x = eye_monitor.eyeh_calibrated,
    trigger_watch_y = eye_monitor.eyev_calibrated,
    x_size = 0.5,
    y_size = 0.5,
    x_position = 0,
    y_position = 0,
    rotation = 0,
    alpha_multiplier = 1,
    )

num_images = 11
image_size = 2.0
num_test_images = 6
image_circle_delta_theta = 2 * pi / num_test_images

sample_image_index = selection (
    values = [0:num_images-1],
    selection = 'random_without_replacement',
    nsamples = 1,
    sampling_method = 'cycles',
    autoreset = false,
    )

image_windows = genlist (
    index, [1:num_images:1],
    stimulus.fixation_point (
        color = 'black',
        trigger_width = image_size,
        trigger_watch_x = fixation_point.trigger_watch_x,
        trigger_watch_y = fixation_point.trigger_watch_y,
        x_size = image_size,
        y_size = image_size,
        x_position = 0,
        y_position = 0,
        rotation = 0,
        alpha_multiplier = 0,  # Fully transparent
        )
    )

images = genlist (
    index, [1:num_images],
    stimulus.image_file (
        path = format('images/img%s.png', index),
        x_size = image_size,
        y_size = image_size,
        x_position = 0,
        y_position = 0,
        rotation = 0,
        alpha_multiplier = 1,
        ),
    )


#
# Functions
#


function test_protocol ():
    trial (
        nsamples = 10,
        sampling_method = 'cycles',
        selection = 'sequential',
        interruptible = true,
        ):

        itc.start ()
        display.queue (fixation_point)
        display.update ()
        print ('Waiting for fixation')

        when (fixation_point.eye_in_window and not eye_monitor.eye_in_saccade):
            present_sample_image ()
        else after (3s):
            no_fixation ()
        end
    end
end


function present_sample_image ():
    sample_image_index.next ()
    display.queue (images[sample_image_index.value])
    display.update ()
    print ('Presenting sample image')

    after (3s):
        post_sample_image_delay ()
    else when (fixation_broken()):
        broken_fixation ()
    end
end


fixation_broken = function () (not fixation_point.eye_in_window and
                               not eye_monitor.eye_in_saccade) end


function post_sample_image_delay ():
    display.dequeue (images[sample_image_index])
    display.update ()
    print ('Imposing post sample image delay')

    after (3s):
        present_test_images ()
    else when (fixation_broken()):
        broken_fixation ()
    end
end


function present_test_images ():
    local image_circle_theta = (image_circle_delta_theta *
                                disc_rand(0, num_test_images-1))

    foreach (index, [0:num_test_images-1]):
        local img = images[sample_image_index.value]
        img.pos_x = image_circle_radius * cos(image_circle_theta)
        img.pos_y = image_circle_radius * sin(image_circle_theta)

        display.queue (img)
        display.queue (image_windows[sample_image_index.value])

        sample_image_index.next ()
        image_circle_theta = image_circle_theta + image_circle_delta_theta
    end

    display.update ()
    print ('Presenting test images')

    after (3s):
        wait_for_selection ()
    else when (fixation_broken()):
        broken_fixation ()
    end
end


function wait_for_selection ():
    display.dequeue (fixation_point)
    display.update ()
end
