#
# I/O
#


display = iodevice.stimulus_display ( background_color = [0.5, 0.5, 0.5] )

local mouse_input = iodevice.mouse_input ()
itc = mouse_input  # Production device will be an ITC-18

eye_monitor = filter.basic_eye_monitor (
    eyeh_calibrated = mouse_input.mouse_position_x,
    eyev_calibrated = mouse_input.mouse_position_y,
    width_samples = 1,
    saccade_entry_speed = 60,
    saccade_exit_speed = 20,
    )


#
# Stimuli
#


fixation_point = stimulus.fixation_point (
    color = 'red',
    trigger_width = 2,
    trigger_watch_x = eye_monitor.eyeh_calibrated,
    trigger_watch_y = eye_monitor.eyev_calibrated,
    x_size = 0.5,
    y_size = 0.5,
    x_position = 0,
    y_position = 0,
    rotation = 0,
    alpha_multiplier = 1,
    )

num_images = 11
image_size = 2.0
num_test_images = 6
image_circle_delta_theta = 2 * math.pi / num_test_images

current_sample_image_index = selection (
    values = [0:num_images-1],
    selection = 'random_without_replacement',
    nsamples = 1,
    sampling_method = 'cycles',
    autoreset = false,
    )

image_windows = genlist (
    index, [1:num_test_images:1],
    stimulus.fixation_point (
        color = 'black',
        trigger_width = image_size,
        trigger_watch_x = fixation_point.trigger_watch_x,
        trigger_watch_y = fixation_point.trigger_watch_y,
        x_size = image_size,
        y_size = image_size,
        x_position = 0,
        y_position = 0,
        rotation = 0,
        alpha_multiplier = 0,  # Fully transparent
        )
    )

images = genlist (
    index, [1:num_images],
    stimulus.image_file (
        path = format('images/img%s.png', index),
        x_size = image_size,
        y_size = image_size,
        x_position = 0,
        y_position = 0,
        rotation = 0,
        alpha_multiplier = 1,
        ),
    )


#
# Variables
#


local num_images_queued = 0
local success = false
local reward = 0


#
# Functions
#


function test_protocol ():
    trial (
        nsamples = 10,
        sampling_method = 'cycles',
        selection = 'sequential',
        interruptible = true,
        ):

        # Reset variables
        current_sample_image_index.reset()
        num_images_queued = 0
        success = false
        reward = 0

        itc.start ()
        display.queue (fixation_point)
        display.update ()
        print ('Waiting for fixation')

        when (fixation_point.eye_in_window and not eye_monitor.eye_in_saccade):
            present_sample_image ()
        else after (3s):
            no_fixation ()
        end
    end
end


function present_sample_image ():
    current_sample_image_index.next ()
    local sample_image = images[current_sample_image_index.value]

    sample_image.pos_x = 0
    sample_image.pos_y = 0

    display.queue (sample_image)
    num_images_queue += 1
    display.update ()

    print ('Presenting sample image')

    after (3s):
        post_sample_image_delay ()
    else when (fixation_broken()):
        broken_fixation ()
    end
end


fixation_broken = function () (not fixation_point.eye_in_window and
                               not eye_monitor.eye_in_saccade) end


function post_sample_image_delay ():
    display.dequeue (images[current_sample_image_index.value])
    num_images_queued -= 1
    display.update ()

    print ('Imposing post sample image delay')

    after (3s):
        present_test_images ()
    else when (fixation_broken()):
        broken_fixation ()
    end
end


function present_test_images ():
    local image_circle_theta = (image_circle_delta_theta *
                                disc_rand(0, num_test_images-1))

    while (num_images_queued < num_test_images):
        local image = images[current_sample_image_index.value]
        local window = image_windows[num_images_queued]

        image.pos_x = window.pos_x = (image_circle_radius *
                                      math.cos(image_circle_theta))
        image.pos_y = window.pos_y = (image_circle_radius *
                                      math.sin(image_circle_theta))

        display.queue (image)
        display.queue (window)

        num_images_queued += 1
        current_sample_image_index.next ()
        image_circle_theta += image_circle_delta_theta
    end

    display.update ()
    print ('Presenting test images')

    after (3s):
        wait_for_selection ()
    else when (fixation_broken()):
        broken_fixation ()
    end
end


function wait_for_selection ():
    display.dequeue (fixation_point)
    display.update ()

    print ('Waiting for selection')

    when (eye_in_sample_image_window()):
        success ()
    else when (eye_in_other_image_window()):
        incorrect_selection ()
    else after (3s):
        no_selection ()
    end
end


function eye_in_sample_image_window ():
    return image_windows[0].eye_in_window and not eye_monitor.eye_in_saccade
end


function eye_in_other_image_window ():
    if (eye_monitor.eye_in_saccade):
        return false
    end

    foreach (i, [1:num_test_images-1]):
        if (image_windows[i].eye_in_window):
            return true
        end
    end

    return false
end


function success ():
    success = true
    print ('Success!')
    dequeue_images ()
end


function dequeue_images ():
    foreach (i, [0:num_images_queued-1]):
        display.dequeue (images[current_sample_image_index[i]])
        display.dequeue (image_windows[i])
        # TODO: num_images_queued -= 1 ??
    end
    clear_display ()
end


function clear_display ():
    display.dequeue (fixation_point)
    display.update ()
    if (success):
        reward ()
    else:
        intertrial_interval ()
    end
end


function reward ():
    uninterruptible():
        reward = 1
        wait (10ms)
        reward = 0
    end
    intertrial_interval ()
end


function intertrial_interval ():
    itc.stop()
    print ('Intertrial interval')
    wait (3s)
end


function no_fixation ():
    print ('No fixation')
    clear_display ()
end


function broken_fixation ():
    print ('Fixation broken')
    dequeue_images ()
end


function no_selection ():
    print ('No selection')
    dequeue_images ()
end


function incorrect_selection ():
    print ('Incorrect selection')
    dequeue_images ()
end
